************************************ class ********************************
class Person{                   //定义了一个名字为Person的类
    //属性写在这
    constructor(name,age){      //constructor是一个构造方法，用来接收参数
        this.name = name;       //this代表的是实例对象
        this.age=age;
    }
    //方法在这呢
    say(){                      //这是一个类的方法，注意千万不要加上function
        return "我的名字叫" + this.name+"今年"+this.age+"岁了";
    }
}
1.在类中声明方法的时候，千万不要给该方法加上function关键字
2.方法之间不要用逗号分隔，否则会报错

constructor方法如果没有显式定义，会隐式生成一个constructor方法。所以即使你没有添加构造函数，构造函数也是存在的。
constructor方法默认返回实例对象this，但是也可以指定constructor方法返回一个全新的对象，让返回的实例对象不是该类的实例。
constructor中定义的属性可以称为实例属性（即定义在this对象上），constructor外声明的属性都是定义在原型上的，可以称为原型属性（即定义在class上)。

类的所有实例共享一个原型对象 ，所以proto属性是相等的  由此，也可以通过proto来为类增加方法。使用实例的proto属性改写原型，会改变Class的原始定义，影响到所有实例，所以不推荐使用！

类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。

Class 的静态方法 
加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用,如果静态方法包含this关键字，这个this指的是类，而不是实例。
