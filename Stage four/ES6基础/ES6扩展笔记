            第二章 字符串扩展
     模版字符串
    `asdfasdffsa`  用`` 括起来  
    最大区别不用用+号连接: console.log(`我叫${ this.name }, 我今年${ this.age }岁!`);

    用来定义模板字符串很方便  可以直接换行 嵌套 还可以用方法
     arr.push(
            `
				<li>
					<span>${ `课程名: ${ title }` }</span>
					<span>${ foo(date) }</span>
				</li>
			`
        );

    2.2 部分新方法  
// padStart() padEnd()   !代码补全
    let str = 'i';
	let str1 = str.padStart(6, 'mooc');  //moocmi  用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。
    
// repeat()   !重复
    str.repeat(10);     //iiiiiiiiii
    
// startsWith() endsWith()  !判断字符串以什么字符开头或结尾 返回true 和 false
    str.startsWith('字符串')

// includes()     !判断字符串是否存在 返回true 和 false
    str.includes('a promise')  //str中存在'a promise 返回true 不存在返回false

// 转成数组
// var oStr = Array.prototype.slice.call(str);
// var oStr = str.split('');
// const oStr = [...str];
// const [...oStr] = str;

// 🐶 \u1f436 unicode码(点)。emoji
console.log('\u1f436');
console.log('\u{1f436}'); //🐶

// Unicode是一项标准 包括字符集、编码方案等
// 他是为了解决传统的字符编码方案的局限而产生的，为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。

// codePointAt 获取字符串中对应字符的一个码点
// '🐶'.codePointAt(0).toString(16);  //1f436

// at 根据下标取字符
// '🐶abc'.at(0)     //取出第0位字符🐶


/***************************************************************/
            第三章 正则扩展
// uy修饰符     // u.  unicode      // y 粘连修饰符   sticky
/***************************************************************/


/***************************************************************/
            第四章 数值扩展
// Number.isNaN     判断是不是NaN  NaN不等于NaN
// Number.isFinite  判断数值是否是有限的
// Number.isSafeInteger();  判断整数是否在最大 最小范围之内
// Number.MAX_SAFE_INTEGER Number.MIN_SAFE_INTEGER  JS能表示的最大 最小范围

// 幂运算  !右结合的 
// let a = (2 ** 3) ** 0;  //1
// let b = 2 ** 3;         //8
/***************************************************************/


/***************************************************************/
            第五章 函数扩展
// 函数参数的默认值
function third({x = 1 ,y = 2} = {}) {} 以后再进行封装函数时应改用默认值设置，特别是某些多参数的函数

// 结合扩展运算符(剩余参数...)
// function sum(...args) {
// 	console.log(args);
// }

// < -- 箭头函数 -- >   !!!!不绑定this，arguments(可以用扩展运算符代替)  
const add1 = (a, b) => a + b;                   //  单行写法 默认有返回值  单行可以省略花括号和return哦~~
const add2 = function(a, b) { return a + b; }   //  结果一样 
const pop = arr => void arr.pop();              //单行没有返回值的写法 void关键字

const add1 = (a, b) => {
   a+=1; 
   return a + b;                        //多行写法  不加return就不会有返回值      
}




/***************************************************************/

