------开发文档------
https://developers.weixin.qq.com/miniprogram/dev/framework/

小程序配置     app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等
编辑器的配置    project.config.json 

<!-- <view> 基本等于 <div>  容器 分割文档 -->
<!-- <image>默认width:300px height:225px -->

 wx:if 条件渲染 
 wx:for 列表渲染 小程序默认了item index  wx:for-item="item" wx:for-index="index"

 this.setData() 设置需要绑定的数据 单向绑定! 得是对象形式

//事件详解
https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#%E4%BA%8B%E4%BB%B6%E8%AF%A6%E8%A7%A3
 bind:tap/bindtap="onTap" 
 catch:tap/catchtap="onTap"    绑定单击事件   
 bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。

跳转页面
 onTap:()=>{
    wx.navigateTo({
      url: '../posts/posts' 页面跳转会有返回键，执行onHide函数  (生命周期函数--监听页面隐藏)
    })
  }
 wx.redirectTo({     页面跳转不会有返回键，执行onUnload函数 (生命周期函数--监听页面卸载)


 any require(string path)
引入模块。返回模块通过 module.exports 或 exports 暴露的接口。
// 导出common.js  
 module.exports.sayHello = sayHello
 exports.sayGoodbye = sayGoodbye
// 引入common.js  
 var common = require('common.js')


 定义模板
使用 name 属性，作为模板的名字。然后在<template/>内定义代码片段 
 <template name="msgItem"> <text> Time: {{time}} </text></template>
 使用模板
使用 is 属性，声明需要的使用的模板，然后将模板所需要的 data 传入
 <template is="msgItem" data="{{...item}}"/>


 <import src="item.wxml"/>
import 有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template 如：C import B，B import A，在C中可以使用B定义的template，在B中可以使用A定义的template，但是C不能使用A定义的template
 <include src="header.wxml"/>
include 可以将目标文件除了 <template/> <wxs/> 外的整个代码引入，相当于是拷贝到 include 位置

小程序数据没有直接传递 而是在标签上定义自定义属性,放入数据如id(以 data- 开头) 然后在回调里面拿事件对象event 再去事件对象上拿自定义属性上的数据

小程序缓存 Sync同步
wx.setStorageSync('key','value') //写入缓存  修改缓存  
wx.get 获取 remove 删除某个 clear 清除全部缓存


wx.showToast({title:'提示消息'}) 显示消息提示框
wx.showModal(Object object) 显示模态对话框