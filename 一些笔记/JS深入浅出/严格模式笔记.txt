"use strict"  //严格模式
不允许使用with
不允许未声明的变量被赋值
严格模式下，arguments变为参数的静态副本。非严格模式下，arguments对象里的元素和对应的参数是指向同一个值的引用

!function(a) {
	arguments[0] = 100;
	console.log(a);  //100
}(1);

!function(a) {
	'use strict';
	arguments[0] = 100;
	console.log(a);  //1
}(1);

但是：传的参数是对象除外。arguments和形参共享传递。

!function(a) {
	'use strict';
	console.log(a.x);  //1
	arguments[0].x = 100;
	console.log(a.x);  //100
}({x: 1});
--------------------- 
.严格模式下，删除参数名，函数名报错。非严格模式返回false，静默失败。(静默失败：不报错也没有任何效果)

!function(a) {
	console.log(a);  //1
	console.log(delete a);  //false
	console.log(a);  //1
}(1);

!function(a) {
	'use strict';
	console.log(a);  //1
	delete a;  //SyntaxError（语法错误）
	console.log(a);  //1
}(1)
--------------------- 
5.严格模式下，函数参数名重复报错。非严格模式最后一个重名参数会覆盖之前的重名参数。
6.严格模式下，删除不可配置(configurable=false)的属性报错。非严格模式返回false，静默失败。
7.严格模式下，修改不可写(writable=false)的属性报错。
8.严格模式下，对象字面量重复属性名报错。
9.严格模式下，禁止八进制字面量。

!function (){
	console.log(0123); //83
}();
		
!function (){
	'use strict';
    console.log(0123); //SyntaxError
}();
10.严格模式下，eval，arguments成为关键字，不能用作变量，函数名。
11.严格模式下，eval变成了独立作用域。
12.严格模式下，给只读属性赋值报错。
13.严格模式下，给不可扩展对象的新属性赋值报错。
14.ES6中，严格模式下，禁止设置五种基本类型值的属性。
12.严格模式下，一般函数调用(不是对象的方法调用，也不使用apply/call/bind等修改this)，this指向undefined，而不是全局对象。
13.严格模式下，使用apply/call/bind，当传入参数是null/undefined时，this指向null/undefined，而不是全局对象。

谨慎地使用严格模式！