<! --------------  Array类型 ------------------------>

Array 对象属性

1、length

设置或返回数组中元素的数目。

2、constructor

返回对创建此对象的数组函数的引用。

3、prototype

使您有能力向对象添加属性和方法。

Array 对象方法

1、concat()

用于连接两个或多个数组，该方法不会改变现有的数组，而是返回被连接数组的一个副本。   原数组没有被修改
如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。

2、join()

把数组中的所有元素放入一个字符串，元素是通过指定的分隔符进行分隔的。
若省略了分隔符参数，则使用逗号作为分隔符。

3、push()

向数组的末尾添加一个或多个元素，并返回新的数组长度。

4、pop()

用于删除数组的最后一个元素，把数组长度减1，并返回被删除元素。
如果数组已经为空，则 pop() 不改变数组，并返回 undefined。

5、shift()

用于把数组的第一个元素从其中删除，并返回被移除的这个元素。
如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined。
该方法是直接修改原数组。

6、unshift()

向数组的开头添加一个或更多元素，并返回新的数组长度。
该方法是直接修改原数组。

7、reverse()

用于颠倒数组中元素的顺序。
该方法会直接修改原数组，而不会创建新数组。

8、sort()

用于对数组的元素进行排序。
该排序直接修改原数组，不生成副本。
该方法接受一个可选参数，若未使用参数，将按字母顺序对数组元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。
如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：

若 a 小于 b，排序后 a 应该在 b 之前，则返回一个小于 0 的值。  function(){ return a - b} 前面小
若 a 等于 b，则返回 0。
若 a 大于 b，则返回一个大于 0 的值。

9、slice(start [,end])  !!!!!!!!

截取原数组从start到end位置（不包含它）元素组成的子数组。  左闭右开区间 不包括右  -1是右最后一位
该方法返回一个新数组，不会修改原数组。                 原数组没有被修改
若未指定end参数，那么截取尾巴直到原数组最后一个元素（包含它）。

10、splice(index,howmany [,item1,item2...])  !!!!!!!

删除从 index 处开始的hownamy个元素，并且用可选参数列表中声明的一个或多个值来替换那些被删除的元素。
该方法返回的是含有被删除的元素组成的数组，若无被删元素，则返回空数组。
若参数只有index，那么原数组将从index开始删除直至结尾。
该方法直接修改原数组。  !!!!!   可删除 插入 替换

some():返回一个boolean，判断是否有元素是否符合func条件

every():返回一个boolean，判断每个元素是否符合func条件

filter():返回一个符合func条件的元素数组

map():返回一个新的Array，每个元素为调用func的结果

forEach(function(x,index,a){}):没有返回值，只是针对每个元素调用func        输出每个元素
x是元素的值  index是元素的索引  a是数组本身

reduce()：reduce方法有两个参数，第一个参数是一个callback，用于针对数组项的操作；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。需要注意的是，reduce方法返回值并不是数组，而是形如初始值的经过叠加处理后的操作。  
可以找出数组中最大的值  或者让全部加起来   或者去重 去重还有 ...set方法


数组检索
arr.indexOf(2);
arr.indexOf(2,1);
arr.indexOf(2,-1);   
查找值在数组中的位置 返回索引 查不到返回-1  
第一个参数是要查找的值 第二个参数是开始查找的位置

arr.lastIndexOf()  
从右往左找

判断是否是数组
Array.isArray([]);  //true
[] instanceof Array;  //true
({}).toString.apply([]) === '[object Array]';  //true
