		< ---  引入zepto --- >						zepto.min.js
	<script type="text/javascript" src="../../lib/zepto.min.js"></script>
	<script src="https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js"></script>

		< ---  引入zepto动画 --- >					fx.js 和 fx_methods.js
	<script src="../../lib/fx.js"></script>
	<script src="../../lib/fx_methods.js"></script>

		< ---	Zepto中touch模块的使用	--- >		
  	<script type="text/javascript" src="../../lib/touch.js"></script>


    $(document).ready(function() {

    })
	$(function(){
		//简写方式
	})

    1、首先理解什么叫对象，什么叫操作
			对象：$(selector)、next()、children()、parent()等     操作：addClass()、html()等
	2、zepto中链式调用的写法
            $('div').html("helloworld").addClass("hello").text()   //操作1
			.next().html().addClass()    // p对象操作2
			.next().html().addClass();

    DOM对象与zepto对象的互相转换        
    	// zepto对象转成DOM对象
		// $('#one')[0];
		// $('#one').get(0);

		//DOM对象转成zepto对象 
		$(one);

	当检测某个元素是否存在的时候
		if($("#tt").length){              //不管找不找得到他会返回对象 所以检测他的length为0 就是没有找到对象 0 == false
			console.log("tt元素找到")
		}

	3.zepto.js选择器怎么写                                                
		ID选择器：$("#foo");
		class选择器：$(".foo");
		标签(元素)选择器：$("div")、$("p");
		通用选择器：$("*");
		
		后代选择器：$("foo bar");
		子元素选择器：$("foo > bar");
		相邻且靠后选择器：$("foo + bar");
		同辈且靠后选择器：$("foo ~ bar");		

		选择器中的特殊符号 · 、# 、( 、] 等   \\表示转义

		// next是取得紧邻的后面的同辈元素		// prev获取紧邻的前面的同辈元素		// siblings获取前后的所有同辈元素
		
		// parent与parents直系亲属		parent父元素		parents父元素,父元素的父元素,一直往上

	// 插入操作
			 $("#a").append($cr);		$cr.appendTo($("#a"));  
			 
			 $("#a").prepend($cr);		$cr.prependTo($("#a"));
			 
			 $("#a").after($cr);		$cr.insertAfter($("#a"));
			 
			 $("#a").before($cr);		$cr.insertBefore($("#a"));
			 
	// 删除 remove\empty  remove删除标签 empty删除值

	// 复制节点clone()

	// 替换节点  replaceWith

	//包裹节点   wrap  wrapAll


	// 事件冒泡
			从底到顶级冒泡，过程中凡是元素添加事件的，都会被执行

	// 事件捕获  <!!!---   zepto不支持事件捕获
			绑定事件: one() 只被调用一次		live() 绑定事件在document（一次 不好用）		delegate()		on()   
			解除绑定事件: .unbind() 和 off() 

	// 事件的委托		 
		$("ul").on("mouseover","li",function(){			//用 on 来事件委托  事件绑定在ul上 但是只有鼠标移到 ul 中的 li 时才触发事件 this指向li
                $(this).css("background","red");   		//只绑定了一个事件 性能好
            })

	// 自定义事件
		$("div").on("muke", function(){
			 	console.log("触发自定义事件");
			 });
			 $("div").trigger("muke");		//触发了自定义事件muke

	// 命名空间
	 	$("div").on("click.muke", function(){
			 	console.log("我是click.muke的事件");
			 })
			 $("div").unbind(".muke");		//清除了带有.muke的事件


		 			< ---  zepto动画 --- >	
	<script src="../../lib/fx.js"></script>
	<script src="../../lib/fx_methods.js"></script>
	
	toggle('slow');   		//切换元素的显示与隐藏  
	hide(3000);			//显示	3s完成	
	hide('slow');		//显示	slow慢速 
	show('fast');		//隐藏	fast快速
	fadeIn('fast');		//淡入
	fadeOut('slow');	//淡出
	fadeToggle('fast');		//切换元素的淡入与淡出
	fadeTo(3000 , 1)	//参数一 3000毫秒 参数二 透明度

	// animate() 动画函数
		$("div").animate({left:"300px", height:"300px"}, 3000, function(){
			alert("动画执行完毕");
		}


				< ---	jquery,zepto插件编写相关  lib/zepto.color.js


				$.fn.pluginName = function(opt){}
				$.fn = jQuery.prototype = $.prototype  !!!


 ;(function($) {
    //一个插件的写法
     $.fn.color = function(option) {

         var options = $.extend({
             col: 'blue',
             fs: '20px'
         }, option)

         this.css({
             color: options.col,
             fontSize: options.fs
         })

         return this;
     }

 })(Zepto);

;(function($) { //前面加分号是为了防止前面的代码没有写分号结尾影响程序。这里采用自执行函数，防止全局被污染
    //一组插件的写法
    $.extend($.fn, {           
		//$.extend等于$.fn.extend等于jQuery.prototype.extend。该方法会把后面的参数覆盖前面的参数，相同参数替换，不存在的参数则添加。
        color: function(option) {

            var options = $.extend({   //这里设置变量是为了设置默认值。
                col: 'blue',
                fs: '20px'
            }, option);

            this.css({  
                color: options.col,
                fontSize: options.fs
            })

            return this;  //链式调用
        },

        background: function(option) {
            var options = $.extend({
                bg: 'white'
            }, option);

            this.css('background', options.bg);

            return this;

        }
    });

})(Zepto);
